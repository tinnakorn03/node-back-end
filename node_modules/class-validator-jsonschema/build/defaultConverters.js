"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const class_validator_1 = require("class-validator");
const _ = require("lodash");
require("reflect-metadata");
exports.defaultConverters = {
    [class_validator_1.ValidationTypes.CUSTOM_VALIDATION]: (meta, options) => {
        if (_.isFunction(meta.target)) {
            const type = getPropType(meta.target.prototype, meta.propertyName);
            return targetToSchema(type, options);
        }
    },
    [class_validator_1.ValidationTypes.NESTED_VALIDATION]: (meta, options) => {
        if (_.isFunction(meta.target)) {
            const typeMeta = options.classTransformerMetadataStorage
                ? options.classTransformerMetadataStorage.findTypeMetadata(meta.target, meta.propertyName)
                : null;
            const childType = typeMeta
                ? typeMeta.typeFunction()
                : getPropType(meta.target.prototype, meta.propertyName);
            return targetToSchema(childType, options);
        }
    },
    [class_validator_1.ValidationTypes.CONDITIONAL_VALIDATION]: {},
    [class_validator_1.ValidationTypes.IS_DEFINED]: {},
    [class_validator_1.ValidationTypes.EQUALS]: meta => {
        const schema = constraintToSchema(meta.constraints[0]);
        if (schema) {
            return Object.assign({}, schema, { enum: [meta.constraints[0]] });
        }
    },
    [class_validator_1.ValidationTypes.NOT_EQUALS]: meta => {
        const schema = constraintToSchema(meta.constraints[0]);
        if (schema) {
            return { not: Object.assign({}, schema, { enum: [meta.constraints[0]] }) };
        }
    },
    [class_validator_1.ValidationTypes.IS_EMPTY]: {
        anyOf: [
            { type: 'string', enum: [''] },
            {
                not: {
                    anyOf: [
                        { type: 'string' },
                        { type: 'number' },
                        { type: 'boolean' },
                        { type: 'integer' },
                        { type: 'array' },
                        { type: 'object' }
                    ]
                },
                nullable: true
            }
        ]
    },
    [class_validator_1.ValidationTypes.IS_NOT_EMPTY]: {
        minLength: 1,
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_IN]: meta => {
        const [head, ...rest] = meta.constraints[0].map(constraintToSchema);
        if (head && _.every(rest, { type: head.type })) {
            return Object.assign({}, head, { enum: meta.constraints[0] });
        }
    },
    [class_validator_1.ValidationTypes.IS_NOT_IN]: meta => {
        const [head, ...rest] = meta.constraints[0].map(constraintToSchema);
        if (head && _.every(rest, { type: head.type })) {
            return { not: Object.assign({}, head, { enum: meta.constraints[0] }) };
        }
    },
    [class_validator_1.ValidationTypes.IS_BOOLEAN]: {
        type: 'boolean'
    },
    [class_validator_1.ValidationTypes.IS_DATE]: {
        oneOf: [
            { format: 'date', type: 'string' },
            { format: 'date-time', type: 'string' }
        ]
    },
    [class_validator_1.ValidationTypes.IS_NUMBER]: {
        type: 'number'
    },
    [class_validator_1.ValidationTypes.IS_STRING]: {
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_DATE_STRING]: {
        pattern: 'd{4}-[01]d-[0-3]dT[0-2]d:[0-5]d:[0-5]d.d+Z?',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_ARRAY]: {
        items: {},
        type: 'array'
    },
    [class_validator_1.ValidationTypes.IS_INT]: {
        type: 'integer'
    },
    [class_validator_1.ValidationTypes.IS_ENUM]: meta => {
        return {
            enum: Object.values(meta.constraints[0]),
            type: 'string'
        };
    },
    [class_validator_1.ValidationTypes.IS_DIVISIBLE_BY]: meta => ({
        multipleOf: meta.constraints[0],
        type: 'number'
    }),
    [class_validator_1.ValidationTypes.IS_POSITIVE]: {
        exclusiveMinimum: true,
        minimum: 0,
        type: 'number'
    },
    [class_validator_1.ValidationTypes.IS_NEGATIVE]: {
        exclusiveMaximum: true,
        maximum: 0,
        type: 'number'
    },
    [class_validator_1.ValidationTypes.MIN]: meta => ({
        minimum: meta.constraints[0],
        type: 'number'
    }),
    [class_validator_1.ValidationTypes.MAX]: meta => ({
        maximum: meta.constraints[0],
        type: 'number'
    }),
    [class_validator_1.ValidationTypes.MIN_DATE]: meta => ({
        description: `After ${meta.constraints[0].toJSON()}`,
        oneOf: [
            { format: 'date', type: 'string' },
            { format: 'date-time', type: 'string' }
        ]
    }),
    [class_validator_1.ValidationTypes.MAX_DATE]: meta => ({
        description: `Before ${meta.constraints[0].toJSON()}`,
        oneOf: [
            { format: 'date', type: 'string' },
            { format: 'date-time', type: 'string' }
        ]
    }),
    [class_validator_1.ValidationTypes.IS_BOOLEAN_STRING]: {
        enum: ['true', 'false'],
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_NUMBER_STRING]: {
        pattern: '^[-+]?[0-9]+$',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.CONTAINS]: meta => ({
        pattern: meta.constraints[0],
        type: 'string'
    }),
    [class_validator_1.ValidationTypes.NOT_CONTAINS]: meta => ({
        not: { pattern: meta.constraints[0] },
        type: 'string'
    }),
    [class_validator_1.ValidationTypes.IS_ALPHA]: {
        pattern: '^[a-zA-Z]+$',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_ALPHANUMERIC]: {
        pattern: '^[0-9a-zA-Z]+$',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_ASCII]: {
        pattern: '^[\\x00-\\x7F]+$',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_BASE64]: {
        format: 'base64',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_BYTE_LENGTH]: {
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_CREDIT_CARD]: {
        format: 'credit-card',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_CURRENCY]: {
        format: 'currency',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_EMAIL]: {
        format: 'email',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_FQDN]: {
        format: 'hostname',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_FULL_WIDTH]: {
        pattern: '[^\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_HALF_WIDTH]: {
        pattern: '[\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_VARIABLE_WIDTH]: {
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_HEX_COLOR]: {
        pattern: '^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_HEXADECIMAL]: {
        pattern: '^[0-9a-fA-F]+$',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_IP]: meta => ({
        format: 'ipv' + (meta.constraints[0] === '6' ? 6 : 4),
        type: 'string'
    }),
    [class_validator_1.ValidationTypes.IS_ISBN]: {
        format: 'isbn',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_ISIN]: {
        format: 'isin',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_ISO8601]: {
        oneOf: [
            { format: 'date', type: 'string' },
            { format: 'date-time', type: 'string' }
        ]
    },
    [class_validator_1.ValidationTypes.IS_JSON]: {
        format: 'json',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_LOWERCASE]: {
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_MOBILE_PHONE]: {
        format: 'mobile-phone',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_MONGO_ID]: {
        pattern: '^[0-9a-fA-F]{24}$',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_MULTIBYTE]: {
        pattern: '[^\\x00-\\x7F]',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_SURROGATE_PAIR]: {
        pattern: '[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_URL]: {
        format: 'url',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.IS_UUID]: {
        format: 'uuid',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.LENGTH]: meta => {
        const [minLength, maxLength] = meta.constraints;
        if (maxLength || maxLength === 0) {
            return { minLength, maxLength, type: 'string' };
        }
        return { minLength, type: 'string' };
    },
    [class_validator_1.ValidationTypes.IS_UPPERCASE]: {
        type: 'string'
    },
    [class_validator_1.ValidationTypes.MIN_LENGTH]: meta => ({
        minLength: meta.constraints[0],
        type: 'string'
    }),
    [class_validator_1.ValidationTypes.MAX_LENGTH]: meta => ({
        maxLength: meta.constraints[0],
        type: 'string'
    }),
    [class_validator_1.ValidationTypes.MATCHES]: meta => ({
        pattern: meta.constraints[0].source,
        type: 'string'
    }),
    [class_validator_1.ValidationTypes.IS_MILITARY_TIME]: {
        pattern: '^([01]\\d|2[0-3]):?([0-5]\\d)$',
        type: 'string'
    },
    [class_validator_1.ValidationTypes.ARRAY_CONTAINS]: meta => {
        const schemas = meta.constraints[0].map(constraintToSchema);
        if (schemas.length > 0 && _.every(schemas, 'type')) {
            return {
                not: {
                    anyOf: _.map(schemas, (d, i) => ({
                        items: {
                            not: Object.assign({}, d, { enum: [meta.constraints[0][i]] })
                        }
                    }))
                },
                type: 'array'
            };
        }
        return { items: {}, type: 'array' };
    },
    [class_validator_1.ValidationTypes.ARRAY_NOT_CONTAINS]: meta => {
        const schemas = meta.constraints[0].map(constraintToSchema);
        if (schemas.length > 0 && _.every(schemas, 'type')) {
            return {
                items: {
                    not: {
                        anyOf: _.map(schemas, (d, i) => (Object.assign({}, d, { enum: [meta.constraints[0][i]] })))
                    }
                },
                type: 'array'
            };
        }
        return { items: {}, type: 'array' };
    },
    [class_validator_1.ValidationTypes.ARRAY_NOT_EMPTY]: {
        items: {},
        minItems: 1,
        type: 'array'
    },
    [class_validator_1.ValidationTypes.ARRAY_MIN_SIZE]: meta => ({
        items: {},
        minItems: meta.constraints[0],
        type: 'array'
    }),
    [class_validator_1.ValidationTypes.ARRAY_MAX_SIZE]: meta => ({
        items: {},
        maxItems: meta.constraints[0],
        type: 'array'
    }),
    [class_validator_1.ValidationTypes.ARRAY_UNIQUE]: {
        items: {},
        type: 'array',
        uniqueItems: true
    }
};
function getPropType(target, property) {
    return Reflect.getMetadata('design:type', target, property);
}
function constraintToSchema(primitive) {
    const primitives = ['string', 'number', 'boolean'];
    const type = typeof primitive;
    if (_.includes(primitives, type)) {
        return { type };
    }
}
function targetToSchema(type, options) {
    if (_.isFunction(type)) {
        if (_.isString(type.prototype) || _.isSymbol(type.prototype)) {
            return { type: 'string' };
        }
        else if (_.isNumber(type.prototype)) {
            return { type: 'number' };
        }
        else if (_.isBoolean(type.prototype)) {
            return { type: 'boolean' };
        }
        return { $ref: options.refPointerPrefix + type.name };
    }
}
//# sourceMappingURL=data:application/json;base64,